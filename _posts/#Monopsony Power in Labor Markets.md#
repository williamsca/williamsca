

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
```

## The Dawn of Industry
A lone entrepreneur (call her Ruby) arrives in a vast wilderness, uniformly populated by farming homesteads. As the bearer of advanced industrial technology, Ruby promptly sets up a factory and hires some locals. She locates her factory directly in the center of the region.


```python
# Set the initial location for Ruby's factory
def plotFirms(points, labels):
    for point, label in zip(points, labels):
        plt.plot(point, visible=False)
        plt.annotate(label, xy=point)
        
    plt.axis([0, 1, 0, 1])
    
plotFirms([(0.5, 0.5)], ["R"])
```


![png](output_2_0.png)


---
Ruby is eager to maximize her profits. She can sell her widgets back East for 1\$ each, and each worker she hires can produce 1 widget. Thus, her profit is given by $\prod = N_w * (1 - w)$, where $N_w$ is the number of workers she can hire at wage $w$. 


```python
# Calculate Ruby's (negative) profit
def profit(w, N_w):
    return -(N_w * (1 - w))  
```

The farmers in the region can always obtain a wage of \$0 by working in the field. They incur travel costs $\beta$ that are linear in the distance to Ruby's factory, so they will choose to work whenever $$w - \beta \sqrt{(x_n - 0.5)^2 + (y_n - 0.5)^2} \geq 0$$

The factory's "draw area" is the circle $\frac{w^2}{\beta^2} = (x - 0.5)^2 + (y - 0.5)^2$. The area of this circle is $A = \pi * \frac{w^2}{\beta^2}$. Note that $A$ is also the fraction of the unit square contained by $A$.

If $N$ is the total number of workers in the region, then Ruby will hire $N_w = N * A = N * \pi * \dfrac{w^2}{\beta^2}$ workers. Her maximization problem is $$\max_w\{N * \pi * \dfrac{w^2}{\beta^2} * (1 - w)\}$$ 

Some calculus gives that Ruby will maximize profit at $w = \frac{2}{3}$. If $\beta = 2$, then she will hire $100 * \pi * \frac{4/9}{4} \approx 35$ workers.


```python
# Initiate the unit square for plotting and simulating.
step = 0.003
x = np.arange(0, 1, step)
y = np.arange(0, 1, step)
xx, yy = np.meshgrid(x, y, sparse = False)
```


```python
# Draw factory's "draw area"
beta = 2
def shareWorkers(pos, w, plot=0):
    x1, y1 = pos[0]
    d = np.sqrt((xx - x1)**2 + (yy - y1)**2)
    
    if plot:
        plotFirms(pos, ["R"])
        plt.contour(x, y, (w - beta * d), [0])
        
    return np.pi * w**2 / beta**2

A = shareWorkers([(0.5, 0.5)], .6667, plot=1)
print(A)
```

    0.3491007578565704
    


![png](output_7_1.png)



```python
# Calculate Ruby's profit
N = 100
N_w = N * A
profit(.6667, N_w)
```




    -11.635528259359493



With 35 employees, Ruby's profit is $35 - (2/3 * 35) \approx 11.64$, as above. (Ignore the minus sign. Scipy.optimize provides an algorithm to minimize a function, so we will later maximize profit by minimizing negative profit.) 

---

# A Competitor Arrives
Observing her enormous success, Ruby's old flatmate Harold decides to open his own factory. He locates his firm at (.75, .75).


```python
plotFirms([(0.5, 0.5), (.75, .75)], ["R", "H"])
```


![png](output_10_0.png)


Ruby will lose some of her workers to Harold. How many, though depends on the wages that they both choose to pay. Each worker compares his real wage at both firms, choosing to work at the factory where they earn the most after paying the cost of travel.

A worker chooses Ruby's factory whenever $$w_R - \beta * d_R \geq w_H - \beta * d_H$$ 

This is equivalent to $$w_R - w_H \geq \beta(d_R - d_H)$$


```python
# Numerically solve for the fraction of workers that a firm employs for a given wage.
def shareN(pos, pos_other, w, w_other):
    x1, y1 = pos
    x2, y2 = pos_other
    
    # calculate the distance each worker must travel to both firms
    d = np.sqrt((xx - x1)**2 + (yy - y1)**2)
    d_other = np.sqrt((xx - x2)**2 + (yy - y2)**2)
    d_diff = d - d_other
    
    # plot the dividing line between the firms
    if False:
        plotFirms([pos, pos_other], ["R", "H"])
        plt.contour(x, y, (w - d - (w_other - d_other)), [0])
        plt.draw()
    
    # workers choose the firm that maximizes W - c, where c is a function of distance
    # if her net wage is negative, the worker stays at home
    lambd = np.multiply(w - w_other > beta * d_diff, w - beta * d >= 0)
        
    # return the fraction of workers who choose this firm
    return np.sum(lambd) / (1 / step**2), lambd.flatten()

def plotWorkers(pos, pos_other, lambd, lambd_other):
    plotFirms([pos, pos_other], ["R", "H"])
    colors = ['red' if point == 1 else 
              'gray' if point_other == 1 else 
              'white' for point, point_other in zip(lambd, lambd_other)]
    plt.scatter(xx, yy, color=colors)
    plt.draw()
```

If Ruby and Harold both set $w = 2/3$, they will secure the workers shown below.


```python
shareR, lambdR = shareN((.5, .5), (.75, .75), .667, .667)
shareH, lambdH = shareN((.75, .75), (.5, .5), .667, .667)
plotWorkers((.5, .5), (.75, .75), lambdR, lambdH)
print('Ruby\'s share: ' + str(round(shareR * 100, 2)) + "%")
print('Harold\'s share: ' + str(round(shareH * 100, 2)) + "%")
```

    Ruby's share: 28.67%
    Harold's share: 23.7%
    


![png](output_14_1.png)


Ruby loses about 6 workers, and Harold picks up 24. In the next edition, I'll look at how Ruby and Harold compete to set their wages. Then, I'll explore whether Harold could have chosen a better location for his factory.


```python
# Numerically solve for the fraction of workers that a firm employs for a given wage.
def shareWorkers(positions, wages, plot = 0):
    lambd = np.zeros(xx.shape)
    
    for i in range(0, len(positions)):
        x1, y1 = positions[i]
        w = wages[i]
        
        for j in range(0, len(positions)): # compare firm to all others
            if j not i:  
                x2, y2 = positions[j]
                w_other = wages[i]
                
                # calculate the distance each worker must travel to both firms
                d = np.sqrt((xx - x1)**2 + (yy - y1)**2)
                d_other = np.sqrt((xx - x2)**2 + (yy - y2)**2)
                d_diff = d - d_other
                
                
    
    # plot the dividing line between the firms
    if plot:
        plotFirms()
        plt.contour(x, y, (w - d - (w_other - d_other)), [0])
        plt.draw()
    
    # workers choose the firm that maximizes W - c, where c is a function of distance
    # if her net wage is negative, the worker stays at home
    lambd = np.multiply(w / w_other - 1 > d_diff, w - d >= 0)
    
    # return the fraction of workers who choose this firm
    return np.sum(lambd) / (1 / step**2)
```

    [[0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     ...
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]
     [0. 0. 0. ... 0. 0. 0.]]
    


```python
wageA = 0.5
wageB = 0.7
lambd = shareN(posA, posB, wageA, wageB, plot = 1)
print("Firm A employs " + str(lambd * 100) + "% of workers.")
```

    Firm A employs 27.3411% of workers.
    


![png](output_17_1.png)



```python
# Calculate the (negative) profit of the firm based on each firm's wage and location.
def profit(w, args):
    pos, pos_other, w_other = args
    lambd = shareN(pos, pos_other, w, w_other)
    return -(lambd * (1 - w))

# Sequentially minimize the (negative) profit for each firm by choosing the wage.
def setWages(argsA, argsB):
    for i in range(0, 4):
        out = minimize(profit, 1, args = argsA)
        argsB[2] = out.get('x')
        
        out = minimize(profit, 1, args = argsB)
        argsA[2] = out.get('x')
        
        # print("ROUND " + str(i) + ":")
        # print("Firm A wage: " + str(argsB[2]))
        # print("Firm B wage: " + str(argsA[2]))
        
    return argsA, argsB
```


```python
# Run the simulation.
wageA = 1
wageB = .8

posA = [.4, .4]
posB = [.5, .5]

argsA = [posA, posB, wageB]
argsB = [posB, posA, wageA]

argsA, argsB = setWages(argsA, argsB)
print("\nFirm A chooses a wage of " + str(argsB[2]) + ".")
print("Firm B chooses a wage of " + str(argsA[2]) + ".")
```

    ROUND 0:
    Firm A wage: [0.83193268]
    Firm B wage: [0.81804991]
    ROUND 1:
    Firm A wage: [0.85141033]
    Firm B wage: [0.85074474]
    ROUND 2:
    Firm A wage: [0.86249898]
    Firm B wage: [0.85074474]
    
    Firm A chooses a wage of [0.86249898].
    Firm B chooses a wage of [0.85074474].
    


```python
# Show the resulting split of the labor force.
# plotFirms()
lambd = shareN(argsA[0], argsA[1], argsB[2], argsA[2], plot = 1)
print("Firm A employs " + str(lambd * 100) + "% of workers.")
```

    Firm A employs 45.3762% of workers.
    


![png](output_20_1.png)



```python
# Simulate different initial conditions
wageA = 0.5

posA = [0.5, 0.5]
posB = [0.4, 0.4]

for i in range(1, 10):
    wageB = i / 10
    argsA = [posA, posB, wageB]
    argsB = [posB, posA, wageA]

    argsA, argsB = setWages(argsA, argsB)
    profA = profit(argsB[2], argsA)
    profB = profit(argsA[2], argsB)
    print("\nFirm B initial wage: " + str(wageB) + ".")
    print("Firm A chooses a wage of " + str(argsB[2]) + "for profit of " + str(-profA) + ".")
    print("Firm B chooses a wage of " + str(argsA[2]) + "for profit of " + str(-profB) + ".")
```

    
    Firm B initial wage: 0.1.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.2.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.3.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.4.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.5.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.6.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.7.
    Firm A chooses a wage of [0.6653822]for profit of [0.14193785].
    Firm B chooses a wage of [0.70256246]for profit of [0.17411607].
    
    Firm B initial wage: 0.8.
    Firm A chooses a wage of [0.85074474]for profit of [0.08222054].
    Firm B chooses a wage of [0.86249898]for profit of [0.06239274].
    
    Firm B initial wage: 0.9.
    Firm A chooses a wage of [0.85074474]for profit of [0.08222054].
    Firm B chooses a wage of [0.86249898]for profit of [0.06239274].
    
