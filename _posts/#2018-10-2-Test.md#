---
layout: post
title: Howdy
mathjax: true
---

The economist Harold Hotelling pointed out that two store owners will naturally locate their stores right next to each other so that they will appeal to the largest possible number of buyers.

Here is some math: $\pi \approx \frac{22}{7}$.


## Finding the Competitive Wage

This notebook simulates competition between two firms situated on a unit square.


```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
```


```python
# Initiate the unit square.
step = 0.003
x = np.arange(0, 1, step)
y = np.arange(0, 1, step)
xx, yy = np.meshgrid(x, y, sparse = True)
```


```python
# Set the initial location for firms A and B; plot the firms.
posA = [.25, .25]
posB = [.75, .75]

def plotFirms():
    plt.plot([posA[0], posB[0]], [posA[1], posB[1]], visible=False)
    plt.annotate("A", xy=posA)
    plt.annotate("B", xy=posB)
    plt.axis([0, 1, 0, 1])
    
plotFirms()
```


![png](/images/output_3_0.png)



```python
# Numerically solve for the fraction of workers that a firm employs for a given wage.
def shareN(pos, pos_other, w, w_other, plot = 0):
    x1, y1 = pos
    x2, y2 = pos_other
    
    # calculate the distance each worker must travel to both firms
    d = np.sqrt((xx - x1)**2 + (yy - y1)**2)
    d_other = np.sqrt((xx - x2)**2 + (yy - y2)**2)
    d_diff = d - d_other
    
    # plot the dividing line between the firms
    if plot:
        plotFirms()
        plt.contour(x, y, (w - d - (w_other - d_other)), [0])
        plt.draw()
    
    # workers choose the firm that maximizes W - c, where c is a function of distance
    # if her net wage is negative, the worker stays at home
    lambd = np.multiply(w / w_other - 1 > d_diff, w - d >= 0)
    
    # return the fraction of workers who choose this firm
    return np.sum(lambd) / (1 / step**2)
```


```python
wageA = 0.5
wageB = 0.7
lambd = shareN(posA, posB, wageA, wageB, plot = 1)
print("Firm A employs " + str(lambd * 100) + "% of workers.")
```

    Firm A employs 27.3411% of workers.
    


![png](/images/output_5_1.png)



```python
# Calculate the (negative) profit of the firm based on each firm's wage and location.
def profit(w, args):
    pos, pos_other, w_other = args
    lambd = shareN(pos, pos_other, w, w_other)
    return -(lambd * (1 - w))

# Sequentially minimize the (negative) profit for each firm by choosing the wage.
def setWages(argsA, argsB):
    for i in range(0, 3):
        out = minimize(profit, 1, args = argsA)
        argsB[2] = out.get('x')
        
        out = minimize(profit, 1, args = argsB)
        argsA[2] = out.get('x')
        
        print("ROUND " + str(i) + ":")
        print("Firm A wage: " + str(argsB[2]))
        print("Firm B wage: " + str(argsA[2]))
        
    return argsA, argsB
```


```python
# Run the simulation.
wageA = 1
wageB = .8

posA = [.4, .4]
posB = [.5, .5]

argsA = [posA, posB, wageB]
argsB = [posB, posA, wageA]

argsA, argsB = setWages(argsA, argsB)
print("\nFirm A chooses a wage of " + str(argsB[2]) + ".")
print("Firm B chooses a wage of " + str(argsA[2]) + ".")
```

    ROUND 0:
    Firm A wage: [0.83193268]
    Firm B wage: [0.81804991]
    ROUND 1:
    Firm A wage: [0.85141033]
    Firm B wage: [0.85074474]
    ROUND 2:
    Firm A wage: [0.86249898]
    Firm B wage: [0.85074474]
    
    Firm A chooses a wage of [0.86249898].
    Firm B chooses a wage of [0.85074474].
    


```python
# Show the resulting split of the labor force.
plotFirms()
lambd = shareN(argsA[0], argsA[1], argsB[2], argsA[2], plot = 1)
print("Firm A employs " + str(lambd * 100) + "% of workers.")
```

    Firm A employs 45.3762% of workers.
    


![png](/images/output_8_1.png)

